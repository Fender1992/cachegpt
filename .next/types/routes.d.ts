// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/a/[slug]" | "/about" | "/admin/bugs" | "/admin/enterprise" | "/admin/feature-flags" | "/admin/funnel-report" | "/auth/callback" | "/auth/claude-setup" | "/auth/provider-callback" | "/auth/provider-capture" | "/auth/success" | "/blog" | "/casual-dashboard" | "/casual-settings" | "/changelog" | "/chat" | "/cli-auth" | "/cli-auth/callback" | "/cli-auth/success" | "/dashboard" | "/enterprise" | "/login" | "/modes" | "/onboarding/provider" | "/onboarding/welcome" | "/pricing" | "/privacy" | "/security" | "/settings" | "/status" | "/support" | "/terms"
type AppRouteHandlerRoutes = "/api/admin/check-access" | "/api/admin/check-news-keys" | "/api/admin/migrate-database" | "/api/api-keys" | "/api/auth/issuer" | "/api/auth/session-health" | "/api/bugs/manage" | "/api/bugs/report" | "/api/cache-feedback" | "/api/cache-warm" | "/api/cache/health" | "/api/checkout" | "/api/claude-sync" | "/api/cli-auth" | "/api/conversations" | "/api/conversations/[id]/messages" | "/api/cron/model-update" | "/api/cron/process-notifications" | "/api/cron/scan-cache-metadata" | "/api/dashboard-stats" | "/api/debug/session" | "/api/feature-flags" | "/api/health" | "/api/health-check" | "/api/me" | "/api/metrics/system" | "/api/metrics/usage" | "/api/model-updates" | "/api/modes" | "/api/modes/click" | "/api/provider-models" | "/api/provider-models/user-available" | "/api/public-stats" | "/api/ranking/features" | "/api/ranking/health" | "/api/share" | "/api/stats" | "/api/stripe/webhook" | "/api/support" | "/api/telemetry" | "/api/test-api-key" | "/api/test-cache" | "/api/test-cache-db" | "/api/test-chat-with-user" | "/api/user/model-preferences" | "/api/v1/usage" | "/api/v2/unified-chat" | "/api/webhooks/stripe"
type PageRoutes = never
type LayoutRoutes = "/" | "/dashboard"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/a/[slug]": { "slug": string; }
  "/about": {}
  "/admin/bugs": {}
  "/admin/enterprise": {}
  "/admin/feature-flags": {}
  "/admin/funnel-report": {}
  "/api/admin/check-access": {}
  "/api/admin/check-news-keys": {}
  "/api/admin/migrate-database": {}
  "/api/api-keys": {}
  "/api/auth/issuer": {}
  "/api/auth/session-health": {}
  "/api/bugs/manage": {}
  "/api/bugs/report": {}
  "/api/cache-feedback": {}
  "/api/cache-warm": {}
  "/api/cache/health": {}
  "/api/checkout": {}
  "/api/claude-sync": {}
  "/api/cli-auth": {}
  "/api/conversations": {}
  "/api/conversations/[id]/messages": { "id": string; }
  "/api/cron/model-update": {}
  "/api/cron/process-notifications": {}
  "/api/cron/scan-cache-metadata": {}
  "/api/dashboard-stats": {}
  "/api/debug/session": {}
  "/api/feature-flags": {}
  "/api/health": {}
  "/api/health-check": {}
  "/api/me": {}
  "/api/metrics/system": {}
  "/api/metrics/usage": {}
  "/api/model-updates": {}
  "/api/modes": {}
  "/api/modes/click": {}
  "/api/provider-models": {}
  "/api/provider-models/user-available": {}
  "/api/public-stats": {}
  "/api/ranking/features": {}
  "/api/ranking/health": {}
  "/api/share": {}
  "/api/stats": {}
  "/api/stripe/webhook": {}
  "/api/support": {}
  "/api/telemetry": {}
  "/api/test-api-key": {}
  "/api/test-cache": {}
  "/api/test-cache-db": {}
  "/api/test-chat-with-user": {}
  "/api/user/model-preferences": {}
  "/api/v1/usage": {}
  "/api/v2/unified-chat": {}
  "/api/webhooks/stripe": {}
  "/auth/callback": {}
  "/auth/claude-setup": {}
  "/auth/provider-callback": {}
  "/auth/provider-capture": {}
  "/auth/success": {}
  "/blog": {}
  "/casual-dashboard": {}
  "/casual-settings": {}
  "/changelog": {}
  "/chat": {}
  "/cli-auth": {}
  "/cli-auth/callback": {}
  "/cli-auth/success": {}
  "/dashboard": {}
  "/enterprise": {}
  "/login": {}
  "/modes": {}
  "/onboarding/provider": {}
  "/onboarding/welcome": {}
  "/pricing": {}
  "/privacy": {}
  "/security": {}
  "/settings": {}
  "/status": {}
  "/support": {}
  "/terms": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/dashboard": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
